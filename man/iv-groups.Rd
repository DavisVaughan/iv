% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/groups.R
\name{iv-groups}
\alias{iv-groups}
\alias{iv_groups}
\alias{iv_identify_group}
\alias{iv_locate_group_bounds}
\alias{iv_locate_groups}
\title{Merge}
\usage{
iv_groups(x, ..., abutting = TRUE)

iv_identify_group(x, ..., abutting = TRUE)

iv_locate_group_bounds(x, ..., abutting = TRUE)

iv_locate_groups(x, ..., abutting = TRUE)
}
\arguments{
\item{x}{\verb{[iv]}

An interval vector.}

\item{...}{These dots are for future extensions and must be empty.}

\item{abutting}{\verb{[logical(1)]}

Should abutting intervals be merged?

If \code{TRUE}, \verb{[a, b)} and \verb{[b, c)} will merge as \verb{[a, c)}. If \code{FALSE}, they
will be kept separate. To be a minimal interval vector, all abutting
intervals must be merged.}
}
\value{
\itemize{
\item For \code{iv_groups()}, an iv with the same type as \code{x}.
\item For \code{iv_identify_group()}, an iv with the same type and size as \code{x}.
\item For \code{iv_locate_group_bounds()}, a two column data frame with \code{start} and
\code{end} integer columns.
\item For \code{iv_locate_groups()}, a two column data frame with a \code{key} column
containing the result of \code{iv_locate_group_bounds()} and a \code{loc} list-column
containing integer vectors.
}
}
\description{
This family of functions revolves around merging the intervals within a
single iv.
\itemize{
\item \code{iv_groups()} merges overlapping or abutting intervals in \code{x}.
\item \code{iv_identify_group()} replaces each interval in \code{x} with the merged
interval that it maps to. This is particularly useful alongside
\code{\link[dplyr:group_by]{dplyr::group_by()}}.
\item \code{iv_locate_group_bounds()} returns locations for slicing the \code{\link[=iv_start]{iv_start()}}
and \code{\link[=iv_end]{iv_end()}} of \code{x} to generate the merged result.
\item \code{iv_locate_groups()} returns a two column data frame with a \code{key}
column containing the result of \code{iv_locate_group_bounds()} and a \code{loc}
list-column containing integer vectors that map each element of \code{x} to the
merged interval that it falls in.
}

Optionally, you can choose \emph{not} to merge abutting intervals with
\code{abutting = FALSE}, which can be useful if you'd like to retain those
boundaries.
\subsection{Minimal interval vectors}{

\code{iv_groups()} is particularly useful because it can generate a \emph{minimal}
interval vector, which covers the range of an interval vector in the most
compact form possible. In particular, a minimal interval vector:
\itemize{
\item Has no overlapping intervals
\item Has no abutting intervals
\item Is ordered on both \code{start} and \code{end}
}

A minimal interval vector is allowed to have a single missing interval,
which is located at the end of the vector.
}
}
\examples{
library(dplyr, warn.conflicts = FALSE)

x <- iv_pairs(
  c(1, 5),
  c(2, 3),
  c(NA, NA),
  c(5, 6),
  c(NA, NA),
  c(9, 12),
  c(11, 14)
)
x

# Merging removes all redundancy while still covering the full range
# of values that were originally represented. If any missing intervals
# are present, a single one is retained.
iv_groups(x)

# Abutting intervals are typically merged, but you can choose not to merge
# them if you want to retain those boundaries
iv_groups(x, abutting = FALSE)

# `iv_identify_group()` is useful alongside `group_by()` and `summarize()`
df <- tibble(x = x)
df <- mutate(df, u = iv_identify_group(x))
df

df \%>\%
  group_by(u) \%>\%
  summarize(n = n())

# The real workhorse here is `iv_locate_groups()`, which returns
# information on where to slice `x` to get the merged result, and which
# observations of `x` belong to which merged interval
iv_locate_groups(x)
}
